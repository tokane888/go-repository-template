name: Test and Lint

on:
  push:
  pull_request:

jobs:
  find-modules:
    name: Find Go Modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.find.outputs.modules }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find all Go modules
        id: find
        run: |
          modules=$(find . -name "go.mod" -not -path "./.git/*" | xargs dirname | sed 's|^\./||' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Found modules: $modules"
          echo "modules=$modules" >> $GITHUB_OUTPUT

  test:
    name: Test (${{ matrix.module }})
    runs-on: ubuntu-latest
    needs: find-modules
    strategy:
      matrix:
        module: ${{ fromJson(needs.find-modules.outputs.modules) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Download dependencies
        working-directory: ${{ matrix.module }}
        run: go mod download

      - name: Run tests
        working-directory: ${{ matrix.module }}
        run: go test -v ./...

  lint:
    name: Lint (${{ matrix.module }})
    runs-on: ubuntu-latest
    needs: find-modules
    strategy:
      matrix:
        module: ${{ fromJson(needs.find-modules.outputs.modules) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Download dependencies
        working-directory: ${{ matrix.module }}
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --config=${{ github.workspace }}/.golangci.yml
          working-directory: ${{ matrix.module }}
        # linter導入直後は一度すべての指摘を潰すまでエラーにはしなくても良い
        # continue-on-error: true
